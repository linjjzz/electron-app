import { app, BrowserWindow, Menu, ipcMain, dialog } from 'electron';
// 第一步：引入remote
// 第二步： 初始化remote
require('@electron/remote/main').initialize()

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minHeight: 600,
    minWidth: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // 开启渲染进程能使用node,新版本还要将上下文设置为false
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // 自定义头部菜单
  const menu = Menu.buildFromTemplate([
    // 一级菜单
    {
      label: "文件",
      // 二级菜单 submenu
      submenu: [
        {
          label: "新建",
          click: () => { }
        },
        {
          type: "separator"
        },
        {
          label: "打开...",
          click: () => {
            dialog.showOpenDialog({ properties: ['openFile'] }).then(({ canceled, filePaths }) => {
              if (!canceled) {
                mainWindow.webContents.send('filePaths', filePaths)
              }
            }).catch(err => {
              console.log(err)
            })
          }
        },
        {
          label: "打开文件夹...",
          click: () => {
            dialog.showOpenDialog({ properties: ['openDirectory'] }).then(({ canceled, filePaths }) => {
              if (!canceled) {
                mainWindow.webContents.send('folderPaths', filePaths)
              }
            }).catch(err => {
              console.log(err)
            })
          }
        },
        {
          type: "separator"
        },
        {
          label: "保存",
          click: () => { }
        },
        {
          label: "另存为...",
          click: () => { }
        },
        {
          type: "separator"
        },
        {
          label: "关闭",
          click: () => { }
        },
      ]
    }
  ])

  Menu.setApplicationMenu(menu)


  // 第三步： 开启remote服务
  require('@electron/remote/main').enable(mainWindow.webContents);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
